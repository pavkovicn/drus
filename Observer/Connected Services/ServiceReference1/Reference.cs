//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Observer.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Measurer", Namespace="http://schemas.datacontract.org/2004/07/Server.Model.Entities")]
    [System.SerializableAttribute()]
    public partial class Measurer : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Observer.ServiceReference1.Location LocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid LocationIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Observer.ServiceReference1.Location Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid LocationId {
            get {
                return this.LocationIdField;
            }
            set {
                if ((this.LocationIdField.Equals(value) != true)) {
                    this.LocationIdField = value;
                    this.RaisePropertyChanged("LocationId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Location", Namespace="http://schemas.datacontract.org/2004/07/Server.Model.Entities")]
    [System.SerializableAttribute()]
    public partial class Location : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Measurement", Namespace="http://schemas.datacontract.org/2004/07/Server.Model.Entities")]
    [System.SerializableAttribute()]
    public partial class Measurement : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int HumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Observer.ServiceReference1.Measurer MeasurerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid MeasurerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TemperatureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Humidity {
            get {
                return this.HumidityField;
            }
            set {
                if ((this.HumidityField.Equals(value) != true)) {
                    this.HumidityField = value;
                    this.RaisePropertyChanged("Humidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Observer.ServiceReference1.Measurer Measurer {
            get {
                return this.MeasurerField;
            }
            set {
                if ((object.ReferenceEquals(this.MeasurerField, value) != true)) {
                    this.MeasurerField = value;
                    this.RaisePropertyChanged("Measurer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid MeasurerId {
            get {
                return this.MeasurerIdField;
            }
            set {
                if ((this.MeasurerIdField.Equals(value) != true)) {
                    this.MeasurerIdField = value;
                    this.RaisePropertyChanged("MeasurerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Temperature {
            get {
                return this.TemperatureField;
            }
            set {
                if ((this.TemperatureField.Equals(value) != true)) {
                    this.TemperatureField = value;
                    this.RaisePropertyChanged("Temperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterMeasurer", ReplyAction="http://tempuri.org/IService1/RegisterMeasurerResponse")]
        Observer.ServiceReference1.Measurer RegisterMeasurer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RegisterMeasurer", ReplyAction="http://tempuri.org/IService1/RegisterMeasurerResponse")]
        System.Threading.Tasks.Task<Observer.ServiceReference1.Measurer> RegisterMeasurerAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/AddMeasurement")]
        void AddMeasurement(Observer.ServiceReference1.Measurement measurement);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/AddMeasurement")]
        System.Threading.Tasks.Task AddMeasurementAsync(Observer.ServiceReference1.Measurement measurement);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLocations", ReplyAction="http://tempuri.org/IService1/GetLocationsResponse")]
        Observer.ServiceReference1.Location[] GetLocations();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLocations", ReplyAction="http://tempuri.org/IService1/GetLocationsResponse")]
        System.Threading.Tasks.Task<Observer.ServiceReference1.Location[]> GetLocationsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetClients", ReplyAction="http://tempuri.org/IService1/GetClientsResponse")]
        Observer.ServiceReference1.Measurer[] GetClients();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetClients", ReplyAction="http://tempuri.org/IService1/GetClientsResponse")]
        System.Threading.Tasks.Task<Observer.ServiceReference1.Measurer[]> GetClientsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMeasurementDate", ReplyAction="http://tempuri.org/IService1/GetMeasurementDateResponse")]
        Observer.ServiceReference1.Measurement[] GetMeasurementDate(System.Guid MeasurerId, System.DateTime fromm, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMeasurementDate", ReplyAction="http://tempuri.org/IService1/GetMeasurementDateResponse")]
        System.Threading.Tasks.Task<Observer.ServiceReference1.Measurement[]> GetMeasurementDateAsync(System.Guid MeasurerId, System.DateTime fromm, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLocationDate", ReplyAction="http://tempuri.org/IService1/GetLocationDateResponse")]
        Observer.ServiceReference1.Measurement[] GetLocationDate(System.Guid LocationId, System.DateTime fromm, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLocationDate", ReplyAction="http://tempuri.org/IService1/GetLocationDateResponse")]
        System.Threading.Tasks.Task<Observer.ServiceReference1.Measurement[]> GetLocationDateAsync(System.Guid LocationId, System.DateTime fromm, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMeasurementValue", ReplyAction="http://tempuri.org/IService1/GetMeasurementValueResponse")]
        Observer.ServiceReference1.Measurement[] GetMeasurementValue(System.Guid MeasurerId, bool greaterThen, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMeasurementValue", ReplyAction="http://tempuri.org/IService1/GetMeasurementValueResponse")]
        System.Threading.Tasks.Task<Observer.ServiceReference1.Measurement[]> GetMeasurementValueAsync(System.Guid MeasurerId, bool greaterThen, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLocationValue", ReplyAction="http://tempuri.org/IService1/GetLocationValueResponse")]
        Observer.ServiceReference1.Measurement[] GetLocationValue(System.Guid LocationId, bool graterThen, double value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLocationValue", ReplyAction="http://tempuri.org/IService1/GetLocationValueResponse")]
        System.Threading.Tasks.Task<Observer.ServiceReference1.Measurement[]> GetLocationValueAsync(System.Guid LocationId, bool graterThen, double value);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/RegisterObserver")]
        void RegisterObserver(System.Guid clientId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IService1/RegisterObserver")]
        System.Threading.Tasks.Task RegisterObserverAsync(System.Guid clientId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Observer.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Observer.ServiceReference1.IService1>, Observer.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Observer.ServiceReference1.Measurer RegisterMeasurer() {
            return base.Channel.RegisterMeasurer();
        }
        
        public System.Threading.Tasks.Task<Observer.ServiceReference1.Measurer> RegisterMeasurerAsync() {
            return base.Channel.RegisterMeasurerAsync();
        }
        
        public void AddMeasurement(Observer.ServiceReference1.Measurement measurement) {
            base.Channel.AddMeasurement(measurement);
        }
        
        public System.Threading.Tasks.Task AddMeasurementAsync(Observer.ServiceReference1.Measurement measurement) {
            return base.Channel.AddMeasurementAsync(measurement);
        }
        
        public Observer.ServiceReference1.Location[] GetLocations() {
            return base.Channel.GetLocations();
        }
        
        public System.Threading.Tasks.Task<Observer.ServiceReference1.Location[]> GetLocationsAsync() {
            return base.Channel.GetLocationsAsync();
        }
        
        public Observer.ServiceReference1.Measurer[] GetClients() {
            return base.Channel.GetClients();
        }
        
        public System.Threading.Tasks.Task<Observer.ServiceReference1.Measurer[]> GetClientsAsync() {
            return base.Channel.GetClientsAsync();
        }
        
        public Observer.ServiceReference1.Measurement[] GetMeasurementDate(System.Guid MeasurerId, System.DateTime fromm, System.DateTime to) {
            return base.Channel.GetMeasurementDate(MeasurerId, fromm, to);
        }
        
        public System.Threading.Tasks.Task<Observer.ServiceReference1.Measurement[]> GetMeasurementDateAsync(System.Guid MeasurerId, System.DateTime fromm, System.DateTime to) {
            return base.Channel.GetMeasurementDateAsync(MeasurerId, fromm, to);
        }
        
        public Observer.ServiceReference1.Measurement[] GetLocationDate(System.Guid LocationId, System.DateTime fromm, System.DateTime to) {
            return base.Channel.GetLocationDate(LocationId, fromm, to);
        }
        
        public System.Threading.Tasks.Task<Observer.ServiceReference1.Measurement[]> GetLocationDateAsync(System.Guid LocationId, System.DateTime fromm, System.DateTime to) {
            return base.Channel.GetLocationDateAsync(LocationId, fromm, to);
        }
        
        public Observer.ServiceReference1.Measurement[] GetMeasurementValue(System.Guid MeasurerId, bool greaterThen, double value) {
            return base.Channel.GetMeasurementValue(MeasurerId, greaterThen, value);
        }
        
        public System.Threading.Tasks.Task<Observer.ServiceReference1.Measurement[]> GetMeasurementValueAsync(System.Guid MeasurerId, bool greaterThen, double value) {
            return base.Channel.GetMeasurementValueAsync(MeasurerId, greaterThen, value);
        }
        
        public Observer.ServiceReference1.Measurement[] GetLocationValue(System.Guid LocationId, bool graterThen, double value) {
            return base.Channel.GetLocationValue(LocationId, graterThen, value);
        }
        
        public System.Threading.Tasks.Task<Observer.ServiceReference1.Measurement[]> GetLocationValueAsync(System.Guid LocationId, bool graterThen, double value) {
            return base.Channel.GetLocationValueAsync(LocationId, graterThen, value);
        }
        
        public void RegisterObserver(System.Guid clientId) {
            base.Channel.RegisterObserver(clientId);
        }
        
        public System.Threading.Tasks.Task RegisterObserverAsync(System.Guid clientId) {
            return base.Channel.RegisterObserverAsync(clientId);
        }
    }
}
